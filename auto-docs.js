'use strict';
/*
  Auto generate markdown docs from groups of sass variables.
  Inspiration: http://sassdoc.com/

  This script collects variables from _base.scss and generates base_rules.md.
  When prefix naming conventions like "$color-" and "$font-size" are followed
  variables will display along with the color or at the specified font-size.

  If you want to auto generate docs for another file add an object to autoDocs:

  {
    "input":"./path/to/scss",
    "output":"./path/to/markdown/docs",
    "overview":"Overview text",
    "sections": {
      "$variable-name-prefix": {
        "title": "Title for this group of variables",
        "descriptions": "Description for this group of variables",
        "variables": []
      }
    }
  }

  If you want to render the value of a variable in a special way, you add a case
  to the cell function.

  Author: Nathan Nichols <nnichols@concentricsky.com>
  Created: Jan. 6, 2018
*/

const fs = require('fs');

const autoDocs = [{
  "input": "./src/scss/_base.scss",
  "output": "./src/docs/02-base_rules.md",
  "overview": "Below are the base values (variables) that are used through the user interface.",
  "sections": {
    "$color": {
      "title": "## Colors",
      "description": "",
      "variables": [] // Variables prefixed with "$color" are pushed here
    },
    "$font-size": {
      "title": "## Font Sizes",
      "description": "Default values for all text appearing within modules.",
      "variables": []
    },
    "$font-family": {
      "title": "## Font Families",
      "description": "The font-stack determines a preferred set of fonts to display to the user.",
      "variables": []
    },
    "$line-height": {
      "title": "## Line Heights",
      "description": "Used alongside font sizes within modules.",
      "variables": []
    },
    "$gridspacing": {
      "title": "## Grid Spacing",
      "description": "Defines the default value used for margins, padding, etc.",
      "variables": []
    },
    "$media": {
      "title": "## Break Points",
      "description": "All modules start for the smallest screen size, then set overrides as needed for each of these breakpoints.",
      "variables": []
    },
    "$transition": {
      "title": "## Animation (Transitions)",
      "description": "Default values for duration and easing of all animations. Visit [easings.net](http://easings.net/) to explore different settings.",
      "variables": []
    },
    "$border-radius": {
      "title": "## Border Radius",
      "description": "",
      "variables": []
    }
  }
}];

const generateDoc = (docConfig) => {
  const lineReader = require('readline').createInterface({
    input: fs.createReadStream(docConfig.input)
  });

  // Add base rule variable names and values to autoDocs
  lineReader.on('line', (line) => {
    Object.keys(docConfig.sections).some(function(key) {
      if (line.startsWith(key)) {
        let tokens = line.trim().slice(0, -1).split(":");
        docConfig.sections[key].variables.push({
          "name": tokens[0],
          "value": tokens[1].trim()
        });
        return true;
      } else {
        return false;
      }
    });
  })

  // Create base_rules.md
  lineReader.on('close', () => {
    let content = `_Do not edit me; I'm auto generated!_\n\n`

    // Append documentation sections to content
    Object.keys(docConfig.sections).forEach((key) => {
      let title = docConfig.sections[key].title;
      let description = docConfig.sections[key].description;
      content += `${title}\n`
      content += description ? `\n${description}\n\n` : `\n`;
      content += `${varsTable(key)}\n\n`;
    })

    // Attempt to write content to markdown document
    fs.writeFile(docConfig.output, content, (err) => {
      if (err) {
        throw new Error('File error: ' + err);
      }
      console.log("Succefully autogenerated", docConfig.output);
    });
  });

  // Create a table for the particular key
  const varsTable = (key) => {
    const tableHeadings = `Variable Name | Value\n------------- | -----\n`;

    let rows = docConfig.sections[key].variables.reduce((str, variable) => {
      return `${str}\`${variable.name}\` | ${cell(variable, key)}\n`
    }, '');

    return tableHeadings + rows.trim();
  }

  // Wrap variable value in appropriate html
  const cell = (variable, key) => {
    switch (key) {
      case "$color":
        return `<p style="background-color: ${variable.value}; padding: 1em; border:\
        1px solid ${variable.value}; color: #fff;text-shadow: #000 0 0 2px;\
        border-radius: 3px">\`${variable.value}\`</p>`;
      case "$font-size":
        return `<p style="font-size: ${variable.value};">${variable.value}</p>`;
      default:
        return variable.value;
    }
  }
}

// Generate docs for each sass file in `autoDocs`
autoDocs.forEach((doc) => generateDoc(doc));