'use strict';
/*
  Auto generate docs as you write scss. This currently only works with groups of
  sass variables. Inspiration: http://sassdoc.com/

  This script collects variables from _base.scss and generates base_rules.md.
  When prefix naming conventions like "$color-" and "$font-size" are followed
  variables will display along with the color or at the specified font-size.

  TODO: This only reads from _base.scss but grunt runs it whenever any sass
  is saved. Bad for performance :(

  Author: Nathan Nichols <nnichols@concentricsky.com>
  Created: Jan. 6, 2018
*/

const fs = require('fs');

const autoDocs = [{
  "input": "./src/scss/_base.scss",
  "output": "./src/docs/base_rules.md",
  "overview": "Below are the base values (variables) that are used through the user interface.",
  "sections": {
    "$color": {
      "title": "## Colors",
      "description": "",
      "variables": [] // Variables prefixed with "$color" are pushed here
    },
    "$font-size": {
      "title": "## Font Sizes",
      "description": "Default values for all text appearing within modules.",
      "variables": []
    },
    "$font-family": {
      "title": "## Font Families",
      "description": "The font-stack determines a preferred set of fonts to display to the user.",
      "variables": []
    },
    "$line-height": {
      "title": "## Line Heights",
      "description": "Used alongside font sizes within modules.",
      "variables": []
    },
    "$gridspacing": {
      "title": "## Grid Spacing",
      "description": "Defines the default value used for margins, padding, etc.",
      "variables": []
    },
    "$media": {
      "title": "## Break Points",
      "description": "All modules start for the smallest screen size, then set overrides as needed for each of these breakpoints.",
      "variables": []
    },
    "$transition": {
      "title": "## Animation (Transitions)",
      "description": "Default values for duration and easing of all animations. Visit [easings.net](http://easings.net/) to explore different settings.",
      "variables": []
    },
    "$border-radius": {
      "title": "## Border Radius",
      "description": "",
      "variables": []
    }
  }
}];

const generateDoc = (docConfig) => {
  const lineReader = require('readline').createInterface({
    input: require('fs').createReadStream(docConfig.input)
  });

  // Add base rule variable names and values to autoDocs
  lineReader.on('line', (line) => {
    Object.keys(docConfig.sections).some(function(key) {
      if (line.startsWith(key)) {
        let tokens = line.trim().slice(0, -1).split(":");
        docConfig.sections[key].variables.push({
          "name": tokens[0],
          "value": tokens[1].trim()
        });
        return true;
      } else {
        return false;
      }
    });
  })

  // Create base_rules.md
  lineReader.on('close', () => {
    let content = `---
status: 'auto'
---
_Do not edit me; I'm auto generated!_\n\n`

    // Append documentation sections to content
    Object.keys(docConfig.sections).forEach((key) => {
      let title = docConfig.sections[key].title;
      let description = docConfig.sections[key].description;
      content += `${title}\n`
      content += description ? `\n${description}\n\n` : `\n`;
      content += `${varsTable(key)}\n\n`;
    })

    // Attempt to write content to base_rules.md
    fs.writeFile(docConfig.output, content, (err) => {
      if (err) {
        throw new Error('File error: ' + err);
      }
      console.log("Succefully autogenerated", docConfig.output);
    });
  });

  // Create a table for the particular key
  const varsTable = (key) => {
    const tableHeadings =
      `Variable Name | Value
  ------------- | -----
  `

    let rows = docConfig.sections[key].variables.reduce((str, variable) => {
      return `${str}\`${variable.name}\` | ${cell(variable, key)}\n`
    }, '');

    return tableHeadings + rows.trim();
  }

  // Wrap variable value in appropriate html
  const cell = (variable, key) => {
    switch (key) {
      case "$color":
        return `<p style="background-color: ${variable.value}; padding: 1em; border:\
        1px solid ${variable.value}; color: ${autoForegroundColor(variable.value)};\
        border-radius: 3px">\`${variable.value}\`</p>`;
      case "$font-size":
        return `<p style="font-size: ${variable.value};">${variable.value}</p>`;
      default:
        return variable.value;
    }
  }
}

/*
  Automatically set black or white as foreground color based on
  background color. Excepts 3 and 6 digit hex values, rgb/a and color names
  TODO: Account for black with 0.05 alpha
*/
const autoForegroundColor = (bgColor) => {

  // Convert rgb/a to hex
  if (bgColor.startsWith('rgb')) {
    bgColor = bgColor.split(/,|\(| |\)/).filter((s) => s != '')
    let rgb = bgColor[3] | (bgColor[2] << 8) | (bgColor[1] << 16);
    bgColor = '#' + (0x1000000 + rgb).toString(16).slice(1)
  }

  if (bgColor.startsWith('#')) {
    bgColor = bgColor.slice(1);
  } else {
    let hex = colorNameToHex(bgColor)
    if (hex) {
      bgColor = hex.slice(1);
    } else {
      throw new Error('Invalid bgColor: ', bgColor);
    }
  }

  // convert 3-digit bgColor to 6-digits.
  if (bgColor.length === 3) {
    bgColor = bgColor[0] + bgColor[0] +
      bgColor[1] + bgColor[1] +
      bgColor[2] + bgColor[2];
  }

  if (bgColor.length !== 6) {
    throw new Error('Invalid bgColor: ', bgColor);
  }

  var r = parseInt(bgColor.slice(0, 2), 16),
    g = parseInt(bgColor.slice(2, 4), 16),
    b = parseInt(bgColor.slice(4, 6), 16);

  return (r * 0.299 + g * 0.587 + b * 0.114) > 186 ?
    '#000' :
    '#fff';
}

/*
  Looks up html color name, return hex or false if not found.
  Is case insensitive. We should probably remove support for this.
*/
const colorNameToHex = (color) => {
  var colors = {
    "aliceblue": "#f0f8ff",
    "antiquewhite": "#faebd7",
    "aqua": "#00ffff",
    "aquamarine": "#7fffd4",
    "azure": "#f0ffff",
    "beige": "#f5f5dc",
    "bisque": "#ffe4c4",
    "black": "#000000",
    "blanchedalmond": "#ffebcd",
    "blue": "#0000ff",
    "blueviolet": "#8a2be2",
    "brown": "#a52a2a",
    "burlywood": "#deb887",
    "cadetblue": "#5f9ea0",
    "chartreuse": "#7fff00",
    "chocolate": "#d2691e",
    "coral": "#ff7f50",
    "cornflowerblue": "#6495ed",
    "cornsilk": "#fff8dc",
    "crimson": "#dc143c",
    "cyan": "#00ffff",
    "darkblue": "#00008b",
    "darkcyan": "#008b8b",
    "darkgoldenrod": "#b8860b",
    "darkgray": "#a9a9a9",
    "darkgreen": "#006400",
    "darkkhaki": "#bdb76b",
    "darkmagenta": "#8b008b",
    "darkolivegreen": "#556b2f",
    "darkorange": "#ff8c00",
    "darkorchid": "#9932cc",
    "darkred": "#8b0000",
    "darksalmon": "#e9967a",
    "darkseagreen": "#8fbc8f",
    "darkslateblue": "#483d8b",
    "darkslategray": "#2f4f4f",
    "darkturquoise": "#00ced1",
    "darkviolet": "#9400d3",
    "deeppink": "#ff1493",
    "deepskyblue": "#00bfff",
    "dimgray": "#696969",
    "dodgerblue": "#1e90ff",
    "firebrick": "#b22222",
    "floralwhite": "#fffaf0",
    "forestgreen": "#228b22",
    "fuchsia": "#ff00ff",
    "gainsboro": "#dcdcdc",
    "ghostwhite": "#f8f8ff",
    "gold": "#ffd700",
    "goldenrod": "#daa520",
    "gray": "#808080",
    "green": "#008000",
    "greenyellow": "#adff2f",
    "honeydew": "#f0fff0",
    "hotpink": "#ff69b4",
    "indianred ": "#cd5c5c",
    "indigo": "#4b0082",
    "ivory": "#fffff0",
    "khaki": "#f0e68c",
    "lavender": "#e6e6fa",
    "lavenderblush": "#fff0f5",
    "lawngreen": "#7cfc00",
    "lemonchiffon": "#fffacd",
    "lightblue": "#add8e6",
    "lightcoral": "#f08080",
    "lightcyan": "#e0ffff",
    "lightgoldenrodyellow": "#fafad2",
    "lightgrey": "#d3d3d3",
    "lightgreen": "#90ee90",
    "lightpink": "#ffb6c1",
    "lightsalmon": "#ffa07a",
    "lightseagreen": "#20b2aa",
    "lightskyblue": "#87cefa",
    "lightslategray": "#778899",
    "lightsteelblue": "#b0c4de",
    "lightyellow": "#ffffe0",
    "lime": "#00ff00",
    "limegreen": "#32cd32",
    "linen": "#faf0e6",
    "magenta": "#ff00ff",
    "maroon": "#800000",
    "mediumaquamarine": "#66cdaa",
    "mediumblue": "#0000cd",
    "mediumorchid": "#ba55d3",
    "mediumpurple": "#9370d8",
    "mediumseagreen": "#3cb371",
    "mediumslateblue": "#7b68ee",
    "mediumspringgreen": "#00fa9a",
    "mediumturquoise": "#48d1cc",
    "mediumvioletred": "#c71585",
    "midnightblue": "#191970",
    "mintcream": "#f5fffa",
    "mistyrose": "#ffe4e1",
    "moccasin": "#ffe4b5",
    "navajowhite": "#ffdead",
    "navy": "#000080",
    "oldlace": "#fdf5e6",
    "olive": "#808000",
    "olivedrab": "#6b8e23",
    "orange": "#ffa500",
    "orangered": "#ff4500",
    "orchid": "#da70d6",
    "palegoldenrod": "#eee8aa",
    "palegreen": "#98fb98",
    "paleturquoise": "#afeeee",
    "palevioletred": "#d87093",
    "papayawhip": "#ffefd5",
    "peachpuff": "#ffdab9",
    "peru": "#cd853f",
    "pink": "#ffc0cb",
    "plum": "#dda0dd",
    "powderblue": "#b0e0e6",
    "purple": "#800080",
    "rebeccapurple": "#663399",
    "red": "#ff0000",
    "rosybrown": "#bc8f8f",
    "royalblue": "#4169e1",
    "saddlebrown": "#8b4513",
    "salmon": "#fa8072",
    "sandybrown": "#f4a460",
    "seagreen": "#2e8b57",
    "seashell": "#fff5ee",
    "sienna": "#a0522d",
    "silver": "#c0c0c0",
    "skyblue": "#87ceeb",
    "slateblue": "#6a5acd",
    "slategray": "#708090",
    "snow": "#fffafa",
    "springgreen": "#00ff7f",
    "steelblue": "#4682b4",
    "tan": "#d2b48c",
    "teal": "#008080",
    "thistle": "#d8bfd8",
    "tomato": "#ff6347",
    "turquoise": "#40e0d0",
    "violet": "#ee82ee",
    "wheat": "#f5deb3",
    "white": "#ffffff",
    "whitesmoke": "#f5f5f5",
    "yellow": "#ffff00",
    "yellowgreen": "#9acd32"
  };
  if (typeof colors[color.toLowerCase()] != 'undefined')
    return colors[color.toLowerCase()];

  return false;
}

autoDocs.forEach((doc) => generateDoc(doc));